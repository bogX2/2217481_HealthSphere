#version: "3.8"

services:
  postgres-db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: healthsphere
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1",
        ]
      interval: 5s
      timeout: 3s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "5050:80" # apri http://localhost:5050
    depends_on:
      postgres-db:
        condition: service_healthy
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  user-service:
    build: ./services/user-service
    ports:
      - "8081:8081"
    depends_on:
      - postgres-db
    env_file:
      - ./services/user-service/.env
    environment:
      - DB_NAME=healthsphere
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres-db
      - JWT_SECRET=supersecretjwt

  doctor-service:
    build: ./services/doctor-service
    ports:
      - "8082:8082"
    env_file:
      - ./services/doctor-service/.env
    depends_on:
      - postgres-db
    volumes:
      - ./services/doctor-service/uploads:/app/uploads

  appointment-service:
    build: ./services/appointment-service
    ports:
      - "8083:8083"
    env_file:
      - ./services/appointment-service/.env
    environment:
      - DB_HOST=postgres-db
      - DB_NAME=healthsphere
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=supersecretjwt
    depends_on:
      - postgres-db

  communication-service:
    build: ./services/communication-service
    ports:
      - "8084:8084"
    environment:
      - DB_HOST=postgres-db
      - DB_NAME=healthsphere
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=supersecretjwt
      - USER_SERVICE_URL=http://user-service:8081
      - FRONTEND_URL=http://localhost:3001
    depends_on:
      - postgres-db

  review-service:
    build: ./services/review-service
    ports:
      - "3005:3005"
    environment:
      - PORT=3005
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=healthsphere
    depends_on:
      - postgres-db
    #volumes:
     # - ./services/review-service:/usr/src/app
     # - /usr/src/app/node_modules

  document-service:
    build: ./services/document-service
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=healthsphere
    volumes:
      - ./services/document-service/uploads:/app/uploads
    depends_on:
      - postgres-db

  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    environment:
      - USER_SERVICE_URL=http://user-service:8081
      - FRONTEND_URL=http://localhost:3001
      - APPOINTMENT_SERVICE_URL=http://appointment-service:8083
    depends_on:
      - user-service
  # Container per metriche dei container
  
  # Prometheus per raccogliere metriche
  prometheus:
    image: prom/prometheus:v2.50.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always

  # Grafana per dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3006:3000" # web UI Grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    restart: always


volumes:
  pgdata:
  pgadmin-data:
